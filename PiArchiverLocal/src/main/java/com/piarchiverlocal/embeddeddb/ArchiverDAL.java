package com.piarchiverlocal.embeddeddb;

/**
 * Created by phan on 3/27/2014.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.piarchiverlocal.pojo.LinkCloud;
import com.piarchiverlocal.util.PiConfig;
import org.apache.log4j.Logger;
import org.hsqldb.Server;

public class ArchiverDAL {
    private static ArchiverDAL instance = null;
    private static Object lock      = new Object();

    static Logger log4j = Logger.getLogger(ArchiverDAL.class.getName());
    private  Connection connection;
    private boolean isConnected = false;
    private final String dbname = "piaHSQLDB";
    private final String CategoryTbl = "CategoryTbl";
    private final String LinkTbl = "LinkTbl";
    final String createCategoryTable =  "CREATE TABLE IF NOT EXISTS "+CategoryTbl
            +" (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, categoryjson longvarchar, updatedon varchar(30))";
    final String createLinkTable = "CREATE TABLE IF NOT EXISTS "+LinkTbl
            +" (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, cloudid integer , url longvarchar, note longvarchar,categoryid integer,cloudcreatedon varchar(30), localupdatedon varchar(30))";

    public static ArchiverDAL instance(){

        if(instance == null) {
            synchronized (lock) {
                if(null == instance){
                    instance = new ArchiverDAL();
                }
            }
        }
        return instance;
    }

    public ArchiverDAL() {
        ConnectToEmbeddedDB();
    }

    private void ConnectToEmbeddedDB() {
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            String dbPath = PiConfig.getInstance().getEmbeddeddbPath()+dbname;
            connection = DriverManager.getConnection("jdbc:hsqldb:" + dbPath, "sa", "");
            //create table if not exist
            connection.prepareStatement(createCategoryTable).execute();
            connection.prepareStatement(createLinkTable).execute();
            isConnected = true;
        } catch (ClassNotFoundException e) {
            log4j.error(e.getMessage()+" "+e.getCause()+" " + e.getStackTrace());
            isConnected = false;
        } catch (SQLException e) {
            log4j.error(e.getMessage() + " " + e.getCause() + " " + e.getStackTrace());
            isConnected = false;
        }
    }
    public void CloseConnection(){
        if (connection != null) {
            try {
                connection.close();
                isConnected = false;
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean Connect(){
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            String dbPath = PiConfig.getInstance().getEmbeddeddbPath()+dbname;
            connection = DriverManager.getConnection("jdbc:hsqldb:" + dbPath, "sa", "");
            isConnected = true;
        } catch (ClassNotFoundException e) {
            log4j.error(e.getMessage()+" "+e.getCause()+" " + e.getStackTrace());
            isConnected = false;
        } catch (SQLException e) {
            log4j.error(e.getMessage() + " " + e.getCause() + " " + e.getStackTrace());
            isConnected = false;
        }
        return isConnected;
    }
    public boolean isConnected() {
        return isConnected;
    }

    public void setConnected(boolean isConnected) {
        this.isConnected = isConnected;
    }

    public boolean InsertOrUpdateCategoryData(String categoryJson){
        boolean res = false;
        if(!isConnected)
            Connect();
        if(isConnected()){
            try {
                ResultSet rs = connection.prepareStatement(
                        "select * from "+ CategoryTbl).executeQuery();
                SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss Z");
                if(rs.next()) {//data is existed then it will update
                    String updatesql = "update "+CategoryTbl +" set categoryjson ='" + categoryJson +"', updatedon='"+datef.format(new Date())+"'"+
                            " where ID = 1";//ID alway is 1 because there is only one record in this table
                   connection.prepareStatement(updatesql).execute();
                }else{//insert data
                        String insertSql = "insert into "+CategoryTbl+"(categoryjson,updatedon) values ('"+categoryJson+"','"+datef.format(new Date())+"')";
                   connection.prepareStatement(insertSql).execute();
                }
                res = true;
            } catch (SQLException e) {
                log4j.error(e.getMessage() + " " + e.getCause() + " " + e.getStackTrace());
                res = false;
            }
        }
        return res;
    }

    public boolean InsertLinkData(LinkCloud linkObj){
        boolean res = false;
        if(!isConnected)
            Connect();
        if(isConnected()){
            try {
                SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss Z");
                String insertSql = "insert into "+LinkTbl+"(cloudid,url,note,categoryid,cloudcreatedon,localupdatedon) values ("+linkObj.getCloudid()+",'" +linkObj.getUrl()
                        +"','"+linkObj.getNote()+"',"+linkObj.getCategoryid()+",'"+linkObj.getCreatedon()+"','" +datef.format(new Date())+"')";
                connection.prepareStatement(insertSql).execute();
                res = true;
            } catch (SQLException e) {
                log4j.error(e.getMessage() + " " + e.getCause() + " " + e.getStackTrace());
                res = false;
            }
        }
        return res;
    }

    public boolean UpdateLinkData(LinkCloud linkObj){
        boolean res = false;
        if(!isConnected)
            Connect();
        if(isConnected()){
            try {
                SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss Z");
                String updatesql = "update "+LinkTbl +" set note ='" + linkObj.getNote()
                        +"', categoryid = " + linkObj.getCategoryid()
                        +", localupdatedon = '"+datef.format(new Date())+"' "+
                        " where ID = "+linkObj.getCloudid();
                connection.prepareStatement(updatesql).execute();
                res = true;
            } catch (SQLException e) {
                log4j.error(e.getMessage() + " " + e.getCause() + " " + e.getStackTrace());
                res = false;
            }
        }
        return res;
    }
}
